---
kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Application template for Coolstore SSO
    iconClass: icon-jboss
    tags: sso,keycloak,java,jboss,xpaas
    version: 1.3.2
  name: sso-service
labels:
  app: sso
  application: sso
  coolstore: sso-service
  demo: coolstore-microservice
  template: sso-service
  xpaas: 1.3.2
objects:
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: sso
  metadata:
    name: sso
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: The web server's http port.
      service.alpha.openshift.io/dependencies: '[{"name":"sso-postgresql","namespace":"","kind":"Service"}]'
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      deploymentConfig: sso
  metadata:
    name: secure-sso
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: The web server's https port.
      service.alpha.openshift.io/dependencies: '[{"name":"sso-postgresql","namespace":"","kind":"Service"}]'
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentConfig: "sso-postgresql"
  metadata:
    name: sso-postgresql
    labels:
      app: sso
      application: sso
      component: "database"
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: The database server port.
- kind: Route
  apiVersion: v1
  id: "sso-http"
  metadata:
    name: sso
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: Route for application's http service.
  spec:
    to:
      name: sso
- kind: Route
  apiVersion: v1
  id: "sso-https"
  metadata:
    name: secure-sso
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: Route for application's https service.
  spec:
    to:
      name: secure-sso
    tls:
      termination: passthrough
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: sso
      application: sso
      build: sso
      coolstore: sso-service
      demo: coolstore-microservice
    name: sso
  spec:
    tags:
    - from:
        kind: DockerImage
        name: sso:latest
      name: latest
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: sso
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - sso
        from:
          kind: ImageStreamTag
          name: sso:latest
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: sso
    template:
      metadata:
        name: sso
        labels:
          app: sso
          application: sso
          coolstore: sso-service
          demo: coolstore-microservice
          deploymentConfig: sso
      spec:
        serviceAccountName: "sso-service-account"
        terminationGracePeriodSeconds: 75
        containers:
        - name: sso
          image: sso
          imagePullPolicy: Always
          volumeMounts:
          - name: eap-keystore-volume
            mountPath: "/etc/eap-secret-volume"
            readOnly: true
          - name: eap-jgroups-keystore-volume
            mountPath: "/etc/jgroups-encrypt-secret-volume"
            readOnly: true
          - name: sso-truststore-volume
            mountPath: "/etc/sso-secret-volume"
            readOnly: true
          lifecycle:
            preStop:
              exec:
                command:
                - "/opt/eap/bin/jboss-cli.sh"
                - "-c"
                - ":shutdown(timeout=60)"
          livenessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/livenessProbe.sh"
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/readinessProbe.sh"
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          - name: ping
            containerPort: 8888
            protocol: TCP
          env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=sso
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: HTTPS_KEYSTORE_DIR
            value: "/etc/eap-secret-volume"
          - name: HTTPS_KEYSTORE
            value: "keystore.jks"
          - name: HTTPS_KEYSTORE_TYPE
            value: "JKS"
          - name: HTTPS_NAME
            value: "jboss"
          - name: HTTPS_PASSWORD
            value: "mykeystorepass"
          - name: JGROUPS_ENCRYPT_SECRET
            value: "sso-app-secret"
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: "/etc/jgroups-encrypt-secret-volume"
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: "jgroups.jceks"
          - name: JGROUPS_ENCRYPT_NAME
            value: "secret-key"
          - name: JGROUPS_ENCRYPT_PASSWORD
            value: "password"
          - name: JGROUPS_CLUSTER_PASSWORD
            value: "password"
          - name: SSO_ADMIN_USERNAME
            value: "admin"
          - name: SSO_ADMIN_PASSWORD
            value: "coolstore"
          - name: SSO_REALM
            value: "coolstore"
          - name: DB_JNDI
            value: "java:jboss/datasources/KeycloakDS"
          - name: DB_USERNAME
            value: coolstore
          - name: DB_PASSWORD
            value: coolstore
          - name: DB_DATABASE
            value: coolstore
          - name: DB_SERVICE_PREFIX_MAPPING
            value: "sso-postgresql=DB"
          - name: TX_DATABASE_PREFIX_MAPPING
            value: "sso-postgresql=DB"
        volumes:
        - name: eap-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: sso-truststore-volume
          secret:
            secretName: "sso-app-secret"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "sso-postgresql"
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      component: database
      demo: coolstore-microservice
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "sso-postgresql"
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "sso-postgresql"
    template:
      metadata:
        name: "sso-postgresql"
        labels:
          app: sso
          application: sso
          component: "database"
          coolstore: sso-service
          demo: coolstore-microservice
          deploymentConfig: "sso-postgresql"
      spec:
        terminationGracePeriodSeconds: 60
        containers:
        - name: "sso-postgresql"
          image: "postgresql"
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U coolstore -q -d coolstore -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: POSTGRESQL_USER
            value: coolstore
          - name: POSTGRESQL_PASSWORD
            value: coolstore
          - name: POSTGRESQL_DATABASE
            value: coolstore
- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: "sso-service-account"
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
  sercrets:
    - name: "sso-app-secret"
- kind: Secret
  apiVersion: v1
  name: sso-app-secret
  metadata:
    name: sso-app-secret
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
    annotations:
      description: Default secret file with name 'jboss' and password 'mykeystorepass'
  data:
    jgroups.jceks: zs7OzgAAAAIAAAABAAAAAwAKc2VjcmV0LWtleQAAAVDQhuHmrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAAPMA0ECHcwLGK6EDyLAgEUdXEAfgAFAAAAmCu9wRKf1aYYUOEWe406ncPtIdm3147G7MJyWUu2kJVY15a2QxeZi9w5J3AF6T64CvylUuQjpcC4DWXwVn9BefntkBR8CzTiH7VxEqVOQ/OkFS29Inoq8t7/NBaTgTdmMkb4ETV1gIsy/+W6kk7QTqxItCkdKKGFE90Be/7yL3tG16TCy/ABKl7CO6PHa44CqK2PUE1oaJ+WdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVMN658veJP01V2j9y8bQCYIzViutw==
    keystore.jks: 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
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: sso-config-files
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
  data:
    client.js: |2
      var request = require('request');
      var sso_service_url=(process.env.SSO_SERVICE_URL || "http://sso:8080"),
        realm = (process.env.SSO_REALM || "coolstore"),
        sso_reg_user = (process.env.SSO_SERVICE_USER_NAME || "admin"),
        sso_reg_password = (process.env.SSO_SERVICE_USER_PASSWD || "coolstore"),
        coolstore_web_client_id = (process.env.COOLSTORE_WEB_CLIENT_ID || "coolstore-web-ui"),
        coolstore_gw_client_id = (process.env.COOLSTORE_GW_CLIENT_ID || "coolstore-gateway"),
        coolstore_web_uri = (process.env.COOLSTORE_WEB_URI || "");



      console.log("fetching access token");
      request.post(
        {
          uri: sso_service_url + '/auth/realms/master/protocol/openid-connect/token',
          strictSSL: false,
          json: true,
          form: {
              username: sso_reg_user,
              password: sso_reg_password,
              grant_type: 'password',
              client_id: 'admin-cli'
          }
        },
        function (err, resp, body) {
          if (!err && resp.statusCode == 200) {
            var token = body.access_token;
            // console.log(token);
            request.post(
            {
                uri: sso_service_url  + '/auth/admin/realms/' + realm + '/clients',
                strictSSL: false,
                auth: {
                    bearer: token
                },
                json: {
                    clientId: coolstore_web_client_id,
                    enabled: true,
                    protocol: "openid-connect",
                    redirectUris: [
                        'http://' + coolstore_web_uri + '/*',
                        'https://' + coolstore_web_uri + '/*'
                    ],
                    webOrigins: [
                        "*"
                    ],
                    "bearerOnly": false,
                    "publicClient": true
                }
            }, function (err, resp, body) {
                console.log("register client result: " + resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body));
            });
            request.post(
            {
                uri: sso_service_url  + '/auth/admin/realms/' + realm + '/clients',
                strictSSL: false,
                auth: {
                    bearer: token
                },
                json: {
                    clientId: coolstore_gw_client_id,
                    enabled: true,
                    protocol: "openid-connect",
                    secret: "0de7b727-8af3-43cb-84da-988d54dffc01",
                    clientAuthenticatorType: "client-secret",
                    "bearerOnly": true,
                    "publicClient": false
                }
            }, function (err, resp, body) {
                console.log("register client result: " + resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body));
            });
            request.post(
              {
                uri: sso_service_url + '/auth/admin/realms/' + realm + '/roles',
                strictSSL: false,
                auth: {
                    bearer: token
                },
                json: {
                    name: 'user'
                }
            },
            function (err, resp, body) {
              if(!err && (resp.statusCode == 201 || resp.statusCode == 409) ) {

                //Successfull created role or role exists
                request.post(
                {
                  uri: sso_service_url + '/auth/admin/realms/' + realm + '/users',
                  strictSSL: false,
                  auth: {
                    bearer: token
                  },
                  json: {
                    username: 'appuser',
                    enabled: true,
                    emailVerified: true,
                    firstName: 'Joe',
                    lastName: 'User',
                    email: 'joeuser@nowhere.com',
                    requiredActions:[]
                  }
                },
                function (err, resp, body) {
                  if(!err && (resp.statusCode == 201 || resp.statusCode == 409) ) {
                    request.get({
                      uri: sso_service_url + '/auth/admin/realms/' + realm + '/users?username=appuser',
                      strictSSL: false,
                      auth: {
                        bearer: token
                      },
                      json: true
                    },
                    function (err, resp, body) {
                      if(!err && resp.statusCode == 200 ) {
                        var userObj = body[0];
                        console.log("Id for user 'appdemo' is " + userObj.id);
                        // set temporary password
                        request.put({
                          uri: sso_service_url + '/auth/admin/realms/' + realm + '/users/' + userObj.id + '/reset-password' ,
                          strictSSL: false,
                          auth: {
                              bearer: token
                          },
                          json: {
                            type: 'password',
                            value: 'coolstore',
                            temporary: false
                          }
                        }, function(err, resp, body) {
                          if(!err && resp.statusCode == 204) {
                            console.log("Successfully reset password for user 'appdemo'");
                          }
                        });

                        console.log("fetching available roles");
                        request.get({
                          uri: sso_service_url + '/auth/admin/realms/' + realm + '/users/' + userObj.id + '/role-mappings/realm/available',
                          strictSSL: false,
                          auth: {
                              bearer: token
                          },
                          json: true
                        },
                        function (err, resp, body) {
                          if(!err && resp.statusCode == 200) {
                            var userRoleObj;
                            for(var i=0; i < body.length; i++) {
                              if(body[i].name == "user") {
                                userRoleObj = body[i];
                              }
                            }
                            if(userRoleObj != null) {
                              console.log("Id for role 'user' is " + userRoleObj.id);
                              request.post({
                                uri: sso_service_url + '/auth/admin/realms/' + realm + '/users/' + userObj.id + '/role-mappings/realm' ,
                                strictSSL: false,
                                auth: {
                                    bearer: token
                                },
                                json: [
                                  {
                                    id: userRoleObj.id,
                                    name: 'user',
                                    scopeParamRequired: false,
                                    composite: false
                                  }
                                ]
                              },
                              function(err, resp, body) {
                                if(!err && resp.statusCode == 204) {
                                  console.log("Successfully assigned role 'user' to user 'appdemo'");
                                }
                              });
                            } else {
                              console.log("Could not find available role 'user' for user 'appdemo'. Either the user already got the role assigned or the role does not exists.")
                            }
                          }
                          else {
                            console.error("Failed to get role-mappings with result " + ( err||resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body) ));
                          }
                        });
                      }
                      else {
                        console.error("Failed to user 'appdemo' token with result " + ( err||resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body) ));
                      }
                    });
                  }
                  else {
                    console.error("Failed to create user 'appdemo' with result " + ( err||resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body) ));
                  }
                });
              }
              else {
                console.error("Failed to create role 'user' with result " + ( err||resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body) ));
              }
            });
          }
          else {
            console.error("Failed to fetch token with result " + ( err||resp.statusCode + " " + resp.statusMessage + " " + JSON.stringify(body) ));
            throw new Error('Faled to connect to SSO service using URL' + sso_service_url + ', you might want to try again later.');
          }
        }
      );

    config-sso.sh: |2
          #!/bin/sh

          appdir=$(mktemp -d /tmp/app.XXXXXX)

          cp $(dirname $0)/* $appdir/

          pushd $appdir > /dev/null

          npm install
          if [ $? -ne 0 ]
          then
            echo "FAILD TO BUILD THE CONFIG SCRIPT"
            exit 1
          fi

          npm start
          if [ $? -ne 0 ]
          then
            echo "FAILD TO RUN THE CONFIG SCRIPT"
            exit 2
          fi

          popd > /dev/null

          rm -rf $appdir
    package.json: |
      {
        "name": "sso-config-client",
        "version": "1.0.0",
        "license": "Apache-2.0",
        "main": "client.js",
        "scripts": {
          "start": "node client",
          "test": "echo \"Error: no test specified\" && exit 1"
        },
        "author": "Red Hat Inc",
        "contributors": [
          "Thomas Qvarnstrom <tqvarnst@redhat.com> (https://developers.redhat.com)"
        ],
        "license": "Apache-2.0",
        "private": true,
        "description": "This script configures the SSO server with default setting for the coolstore demo",
        "homepage": "https://developers.redhat.com",
        "dependencies": {
          "request": "2.79.0"
        }
      }
- kind: BuildConfig
  apiVersion: v1
  metadata:
    labels:
      app: sso
      application: sso
      build: sso
      coolstore: sso-service
      demo: coolstore-microservice
    name: sso
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: sso:latest
    source:
      contextDir: sso-service
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      dockerStrategy: {}
      type: Docker
    triggers:
    - type: ConfigChange
    - type: ImageChange
- kind: Pod
  apiVersion: v1
  metadata:
    name: sso-config-client
    labels:
      app: sso
      application: sso
      coolstore: sso-service
      demo: coolstore-microservice
  spec:
    containers:
    - name: sso-config
      image: registry.access.redhat.com/rhscl/nodejs-4-rhel7
      command:
      - /bin/sh
      - /tmp/config-files/config-sso.sh
      env:
      - name: PATH
        value: /opt/rh/rh-nodejs4/root/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - name: LD_LIBRARY_PATH
        value: /opt/rh/rh-nodejs4/root/usr/lib64
      - name: COOLSTORE_WEB_URI
        value: ${WEB_UI_HOSTNAME}
      volumeMounts:
      - mountPath: /tmp/config-files
        name: config-volume
    volumes:
    - name: config-volume
      configMap:
        name: sso-config-files
    restartPolicy: OnFailure
parameters:
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  required: true
  value: https://github.com/jbossdemocentral/coolstore-microservice
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  required: true
  value: master
- description: Hostname/public route of the web-ui service for example web-ui-coolstore.apps.example.com. Do not specify protocol (eg. http or https)
  displayName: Hostname of the web-ui service
  name: WEB_UI_HOSTNAME
  required: true

